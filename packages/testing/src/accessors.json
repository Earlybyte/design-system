[{"name":"AccordionAccessor","description":["AccordionAccessor is a helper object for E-2-E testing.","It maps the accordion behaviour to the `bal-accordion` ui component.","","```typescript","import { dataTestSelector, AccordionAccessor } from '@baloise/ui-library-testing'","","describe('Accordion', () => {","it('should ...', () => {","const accordion = AccordionAccessor(dataTestSelector('accordion-id')).get()","accordion.click()","accordion.assertBodyExists()","accordion.contains('Label')","})","})","```"],"methods":[{"name":"click","description":["Toggle the accordion"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"contains","description":["It checks that the accordion label contains the given texts"],"signature":"content: string"},{"name":"assertBodyExists","description":["Asserts that accordion is open"],"signature":""},{"name":"assertBodyNotExists","description":["Asserts that accordion is closed"],"signature":""},{"name":"click","description":["Triggers a clicks on the element"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"clickNth","description":["Triggers n times a click on the element"],"signature":"index: number, options?: Partial<Cypress.ClickOptions>"},{"name":"assertExists","description":["Asserts that the element exists in the DOM"],"signature":""},{"name":"assertNotExists","description":["Asserts that the element does not exist in the DOM"],"signature":""},{"name":"should","description":["Creates an assertion.","Find more information here [link](https://docs.cypress.io/api/commands/should.html#Syntax)"],"signature":"chainers: string, attribute?: string, content?: string"},{"name":"assertVisible","description":["Assert that the component is visible for the user"],"signature":""},{"name":"assertNotVisible","description":["Assert that the component is not visible for the user"],"signature":""},{"name":"selectNth","description":["Selects the option at the given index"],"signature":"index: number"},{"name":"assertAttributeEquals","description":["Asserting that the element has the attribute and the value."],"signature":"attribute: string, value: string"},{"name":"assertAttributeInclude","description":["Asserting that the element has the attribute and include the value."],"signature":"attribute: string, value: string"},{"name":"assertFullUrl","description":["Asserting if given url argument matches the url of the browser."],"signature":"url: string"},{"name":"assertPartUrl","description":["Asserting if the browser url contains the given url argument."],"signature":"url: string"},{"name":"wait","description":["Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command."],"signature":"time: number"}]},{"name":"ButtonAccessor","description":["ButtonAccessor is a helper object for E-2-E testing.","It maps the button behaviour to the `bal-button` ui component.","","```typescript","import { dataTestSelector, ButtonAccessor } from '@baloise/ui-library-testing'","","describe('Button', () => {","it('should ...', () => {","const button = ButtonAccessor(dataTestSelector('button-id')).get()","button.click()","button.assertIsEnabled()","button.contains('Label')","})","})","```"],"methods":[{"name":"contains","description":["Check the content of the label element"],"signature":"content: string"},{"name":"assertIsDisabled","description":["Asserts that button is disabled"],"signature":""},{"name":"click","description":["Triggers a clicks on the element"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"clickNth","description":["Triggers n times a click on the element"],"signature":"index: number, options?: Partial<Cypress.ClickOptions>"},{"name":"assertExists","description":["Asserts that the element exists in the DOM"],"signature":""},{"name":"assertNotExists","description":["Asserts that the element does not exist in the DOM"],"signature":""},{"name":"should","description":["Creates an assertion.","Find more information here [link](https://docs.cypress.io/api/commands/should.html#Syntax)"],"signature":"chainers: string, attribute?: string, content?: string"},{"name":"contains","description":["Verifies if the content of the element matches"],"signature":"content: string | number | RegExp"},{"name":"assertIsDisabled","description":["Asserts that the element is disabled"],"signature":""},{"name":"assertIsEnabled","description":["Asserts that the element is enabled and can be used"],"signature":""},{"name":"assertVisible","description":["Assert that the component is visible for the user"],"signature":""},{"name":"assertNotVisible","description":["Assert that the component is not visible for the user"],"signature":""},{"name":"selectNth","description":["Selects the option at the given index"],"signature":"index: number"},{"name":"assertAttributeEquals","description":["Asserting that the element has the attribute and the value."],"signature":"attribute: string, value: string"},{"name":"assertAttributeInclude","description":["Asserting that the element has the attribute and include the value."],"signature":"attribute: string, value: string"},{"name":"assertFullUrl","description":["Asserting if given url argument matches the url of the browser."],"signature":"url: string"},{"name":"assertPartUrl","description":["Asserting if the browser url contains the given url argument."],"signature":"url: string"},{"name":"wait","description":["Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command."],"signature":"time: number"}]},{"name":"CheckboxAccessor","description":["CheckboxAccessor is a helper object for E-2-E testing.","It maps the checkbox behaviour to the `bal-checkbox` ui component.","","```typescript","import { dataTestSelector, CheckboxAccessor } from '@baloise/ui-library-testing'","","describe('Checkbox', () => {","it('should ...', () => {","const checkbox = CheckboxAccessor(dataTestSelector('checkbox-id')).get()","checkbox.click()","checkbox.assertIsChecked()","checkbox.contains('Label')","})","})","```"],"methods":[{"name":"click","description":["Clicks the checkbox and set checked to true"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"check","description":["Clicks the checkbox and set checked to true"],"signature":"options?: Partial<Cypress.CheckOptions>"},{"name":"assertIsChecked","description":["Assert if the checkbox is checked"],"signature":"shouldBeChecked: boolean = true"},{"name":"assertIsDisabled","description":["Assert if the checkbox is disabled"],"signature":""},{"name":"assertIsEnabled","description":["Assert if the checkbox is enabled and not disabled"],"signature":""},{"name":"contains","description":["Check the content of the label element"],"signature":"content: string"},{"name":"assertExists","description":["Asserts that the element exists in the DOM"],"signature":""},{"name":"assertNotExists","description":["Asserts that the element does not exist in the DOM"],"signature":""},{"name":"assertVisible","description":["Assert that the component is visible for the user"],"signature":""},{"name":"assertNotVisible","description":["Assert that the component is not visible for the user"],"signature":""},{"name":"selectNth","description":["Selects the option at the given index"],"signature":"index: number"},{"name":"should","description":["Creates an assertion.","Find more information here [link](https://docs.cypress.io/api/commands/should.html#Syntax)"],"signature":"chainers: string, attribute?: string, content?: string"}]},{"name":"DatepickerAccessor","description":["DatepickerAccessor is a helper object for E-2-E testing.","It maps the datepicker behaviour to the `bal-datepicker` ui component.","","```typescript","import { dataTestSelector, DatepickerAccessor } from '@baloise/ui-library-testing'","","describe('Datepicker', () => {","it('should ...', () => {","const datepicker = DatepickerAccessor(dataTestSelector('datepicker-id')).get()","datepicker.open()","datepicker.pick(new Date())","datepicker.shouldHaveValue(new Date())","})","})","```"],"methods":[{"name":"write","description":["Write in the datepicker"],"signature":"date: string"},{"name":"open","description":["Open the datepicker"],"signature":""},{"name":"pick","description":["Pick the date"],"signature":"date: Date"},{"name":"shouldHaveValue","description":["Check if datepicker have value"],"signature":"date: Date"},{"name":"assertDateInRange","description":["Assert if the date is in range"],"signature":"date: Date, shouldBeInRange: boolean = true"}]},{"name":"DropdownAccessor","description":["DropdownAccessor is a helper object for E-2-E testing.","It maps the dropdown behaviour to the `bal-dropdown` ui component.","","```typescript","import { dataTestSelector, DropdownAccessor } from '@baloise/ui-library-testing'","","describe('Dropdown', () => {","it('should ...', () => {","const dropdown = DropdownAccessor(dataTestSelector('dropdown-id')).get()","dropdown.click()","})","})","```"],"methods":[{"name":"click","description":["Clicks the dropdown"],"signature":"options?: Partial<Cypress.ClickOptions>"}]},{"name":"InputAccessor","description":["InputAccessor is a helper object for E-2-E testing.","It maps the input behaviour to the `bal-input` ui component.","","```typescript","import { dataTestSelector, InputAccessor } from '@baloise/ui-library-testing'","","describe('Input', () => {","it('should ...', () => {","const input = InputAccessor(dataTestSelector('input-id')).get()","input.assertValue('value)","})","})","```"],"methods":[{"name":"assertValue","description":["Assert if the checkbox have value"],"signature":"value: any"},{"name":"click","description":["Triggers a clicks on the element"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"clickNth","description":["Triggers n times a click on the element"],"signature":"index: number, options?: Partial<Cypress.ClickOptions>"},{"name":"type","description":["Type into the component"],"signature":"text: string, options?: Partial<Cypress.TypeOptions>"},{"name":"blur","description":["Lose focus of this element"],"signature":"options?: Partial<Cypress.BlurOptions>"},{"name":"should","description":["Creates an assertion.","Find more information here [link](https://docs.cypress.io/api/commands/should.html#Syntax)"],"signature":"chainers: string, attribute?: string, content?: string"},{"name":"clear","description":["Clears the value of the element"],"signature":"options?: Partial<Cypress.TypeOptions>"},{"name":"contains","description":["Verifies if the content of the element matches"],"signature":"content: string | number | RegExp"},{"name":"assertExists","description":["Asserts that the element exists in the DOM"],"signature":""},{"name":"assertNotExists","description":["Asserts that the element does not exist in the DOM"],"signature":""},{"name":"assertIsDisabled","description":["Asserts that the element is disabled"],"signature":""},{"name":"assertIsEnabled","description":["Asserts that the element is enabled and can be used"],"signature":""},{"name":"assertVisible","description":["Assert that the component is visible for the user"],"signature":""},{"name":"assertNotVisible","description":["Assert that the component is not visible for the user"],"signature":""},{"name":"selectNth","description":["Selects the option at the given index"],"signature":"index: number"},{"name":"assertAttributeEquals","description":["Asserting that the element has the attribute and the value."],"signature":"attribute: string, value: string"},{"name":"assertAttributeInclude","description":["Asserting that the element has the attribute and include the value."],"signature":"attribute: string, value: string"},{"name":"assertFullUrl","description":["Asserting if given url argument matches the url of the browser."],"signature":"url: string"},{"name":"assertPartUrl","description":["Asserting if the browser url contains the given url argument."],"signature":"url: string"},{"name":"wait","description":["Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command."],"signature":"time: number"}]},{"name":"ListAccessor","description":["// export const ListAssertableMixin: Mixin = <T>({selector, creator}: MixinContext<T>) => ({","//   assertIsSelected: (number: string) => {","//     const link = cy.get(selector).find('.page-link');","//     link.should('contain', number);","//     return creator();","//   }","// });"],"methods":[{"name":"select","description":["Selects the element from the list"],"signature":"index: number, options?: Partial<Cypress.ClickOptions>"},{"name":"contains","description":["Verifies if the content of the element matches"],"signature":"content: string | number | RegExp"},{"name":"assertExists","description":["Asserts that the element exists in the DOM"],"signature":""},{"name":"assertNotExists","description":["Asserts that the element does not exist in the DOM"],"signature":""},{"name":"click","description":["Triggers a clicks on the element"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"clickNth","description":["Triggers n times a click on the element"],"signature":"index: number, options?: Partial<Cypress.ClickOptions>"},{"name":"assertIsDisabled","description":["Asserts that the element is disabled"],"signature":""},{"name":"assertIsEnabled","description":["Asserts that the element is enabled and can be used"],"signature":""},{"name":"should","description":["Creates an assertion.","Find more information here [link](https://docs.cypress.io/api/commands/should.html#Syntax)"],"signature":"chainers: string, attribute?: string, content?: string"},{"name":"assertVisible","description":["Assert that the component is visible for the user"],"signature":""},{"name":"assertNotVisible","description":["Assert that the component is not visible for the user"],"signature":""},{"name":"selectNth","description":["Selects the option at the given index"],"signature":"index: number"},{"name":"assertAttributeEquals","description":["Asserting that the element has the attribute and the value."],"signature":"attribute: string, value: string"},{"name":"assertAttributeInclude","description":["Asserting that the element has the attribute and include the value."],"signature":"attribute: string, value: string"},{"name":"assertFullUrl","description":["Asserting if given url argument matches the url of the browser."],"signature":"url: string"},{"name":"assertPartUrl","description":["Asserting if the browser url contains the given url argument."],"signature":"url: string"},{"name":"wait","description":["Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command."],"signature":"time: number"}]},{"name":"ModalButtonAccessor","description":["ModalButtonAccessor is a helper object for E-2-E testing.","It maps the model behaviour to the `bal-model` ui component.","","```typescript","import { dataTestSelector, ModalButtonAccessor } from '@baloise/ui-library-testing'","","describe('Model', () => {","it('should ...', () => {","const model = ModalButtonAccessor(dataTestSelector('model-id')).get()","model.clickOpenModalButton()","model.assertBigModalContent('content')","})","})","```"],"methods":[{"name":"contains","description":["Checks if element contains content"],"signature":"content: string"},{"name":"closeModal","description":["Closes the modal"],"signature":""},{"name":"assertExists","description":["Asserts that the element exists in the DOM"],"signature":""},{"name":"assertNotExists","description":["Asserts that the element does not exist in the DOM"],"signature":""},{"name":"click","description":["Triggers a clicks on the element"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"clickNth","description":["Triggers n times a click on the element"],"signature":"index: number, options?: Partial<Cypress.ClickOptions>"},{"name":"should","description":["Creates an assertion.","Find more information here [link](https://docs.cypress.io/api/commands/should.html#Syntax)"],"signature":"chainers: string, attribute?: string, content?: string"},{"name":"assertVisible","description":["Assert that the component is visible for the user"],"signature":""},{"name":"assertNotVisible","description":["Assert that the component is not visible for the user"],"signature":""},{"name":"assertIsDisabled","description":["Asserts that the element is disabled"],"signature":""},{"name":"assertIsEnabled","description":["Asserts that the element is enabled and can be used"],"signature":""},{"name":"selectNth","description":["Selects the option at the given index"],"signature":"index: number"},{"name":"assertAttributeEquals","description":["Asserting that the element has the attribute and the value."],"signature":"attribute: string, value: string"},{"name":"assertAttributeInclude","description":["Asserting that the element has the attribute and include the value."],"signature":"attribute: string, value: string"},{"name":"assertFullUrl","description":["Asserting if given url argument matches the url of the browser."],"signature":"url: string"},{"name":"assertPartUrl","description":["Asserting if the browser url contains the given url argument."],"signature":"url: string"},{"name":"wait","description":["Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command."],"signature":"time: number"}]},{"name":"RadioAccessor","description":["RadioAccessor is a helper object for E-2-E testing.","It maps the radio behaviour to the `bal-radio` ui component.","","```typescript","import { dataTestSelector, RadioAccessor } from '@baloise/ui-library-testing'","","describe('Radio', () => {","it('should ...', () => {","const radio = RadioAccessor(dataTestSelector('radio-id')).get()","radio.select(1)","})","})","```"],"methods":[{"name":"select","description":["Selects option"],"signature":"indexes: number | number[]"},{"name":"check","description":["Check element"],"signature":"options?: Partial<Cypress.CheckOptions>"},{"name":"assertIsChecked","description":["Assert if the the element is checked"],"signature":"shouldBeChecked?: boolean"},{"name":"click","description":["Triggers a clicks on the element"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"clickNth","description":["Triggers n times a click on the element"],"signature":"index: number, options?: Partial<Cypress.ClickOptions>"},{"name":"contains","description":["Verifies if the content of the element matches"],"signature":"content: string | number | RegExp"},{"name":"assertExists","description":["Asserts that the element exists in the DOM"],"signature":""},{"name":"assertNotExists","description":["Asserts that the element does not exist in the DOM"],"signature":""},{"name":"assertIsDisabled","description":["Asserts that the element is disabled"],"signature":""},{"name":"assertIsEnabled","description":["Asserts that the element is enabled and can be used"],"signature":""},{"name":"should","description":["Creates an assertion.","Find more information here [link](https://docs.cypress.io/api/commands/should.html#Syntax)"],"signature":"chainers: string, attribute?: string, content?: string"},{"name":"assertVisible","description":["Assert that the component is visible for the user"],"signature":""},{"name":"assertNotVisible","description":["Assert that the component is not visible for the user"],"signature":""},{"name":"selectNth","description":["Selects the option at the given index"],"signature":"index: number"},{"name":"assertAttributeEquals","description":["Asserting that the element has the attribute and the value."],"signature":"attribute: string, value: string"},{"name":"assertAttributeInclude","description":["Asserting that the element has the attribute and include the value."],"signature":"attribute: string, value: string"},{"name":"assertFullUrl","description":["Asserting if given url argument matches the url of the browser."],"signature":"url: string"},{"name":"assertPartUrl","description":["Asserting if the browser url contains the given url argument."],"signature":"url: string"},{"name":"wait","description":["Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command."],"signature":"time: number"}]},{"name":"SelectAccessor","description":["SelectAccessor is a helper object for E-2-E testing.","It maps the select behaviour to the `bal-select` ui component.","","```typescript","import { dataTestSelector, SelectAccessor } from '@baloise/ui-library-testing'","","describe('Select', () => {","it('should ...', () => {","const select = SelectAccessor(dataTestSelector('select-id')).get()","select.click()","select.select(1)","select.contains('value')","})","})","```"],"methods":[{"name":"click","description":["Clicks the input"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"select","description":["Selects dropdown item"],"signature":"index: number"},{"name":"assertOptions","description":["Checks the options"],"signature":"...options: string[]"},{"name":"contains","description":["Checks if input have a content"],"signature":"content: string | number | RegExp"}]},{"name":"TabsAccessor","description":["TabsAccessor is a helper object for E-2-E testing.","It maps the tabs behaviour to the `bal-tabs` ui component.","","```typescript","import { dataTestSelector, TabsAccessor } from '@baloise/ui-library-testing'","","describe('Tabs', () => {","it('should ...', () => {","const tabs = TabsAccessor(dataTestSelector('tabs-id')).get()","tabs.select(1)","tabs.assertVisible('value')","})","})","```"],"methods":[{"name":"assertVisible","description":["Assert if tab is visible"],"signature":"text: string"},{"name":"select","description":["Selects tab"],"signature":"index: number"},{"name":"click","description":["Triggers a clicks on the element"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"clickNth","description":["Triggers n times a click on the element"],"signature":"index: number, options?: Partial<Cypress.ClickOptions>"},{"name":"contains","description":["Verifies if the content of the element matches"],"signature":"content: string | number | RegExp"},{"name":"assertExists","description":["Asserts that the element exists in the DOM"],"signature":""},{"name":"assertNotExists","description":["Asserts that the element does not exist in the DOM"],"signature":""},{"name":"should","description":["Creates an assertion.","Find more information here [link](https://docs.cypress.io/api/commands/should.html#Syntax)"],"signature":"chainers: string, attribute?: string, content?: string"},{"name":"assertIsDisabled","description":["Asserts that the element is disabled"],"signature":""},{"name":"assertIsEnabled","description":["Asserts that the element is enabled and can be used"],"signature":""},{"name":"selectNth","description":["Selects the option at the given index"],"signature":"index: number"},{"name":"assertAttributeEquals","description":["Asserting that the element has the attribute and the value."],"signature":"attribute: string, value: string"},{"name":"assertAttributeInclude","description":["Asserting that the element has the attribute and include the value."],"signature":"attribute: string, value: string"},{"name":"assertFullUrl","description":["Asserting if given url argument matches the url of the browser."],"signature":"url: string"},{"name":"assertPartUrl","description":["Asserting if the browser url contains the given url argument."],"signature":"url: string"},{"name":"wait","description":["Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command."],"signature":"time: number"}]},{"name":"TextAccessor","description":["TextAccessor is a helper object for E-2-E testing.","It maps the text behaviour to the `bal-text` ui component.","","```typescript","import { dataTestSelector, TextAccessor } from '@baloise/ui-library-testing'","","describe('Text', () => {","it('should ...', () => {","const text = TextAccessor(dataTestSelector('text-id')).get()","text.contains('Label')","})","})","```"],"methods":[{"name":"contains","description":["Verifies if the content of the element matches"],"signature":"content: string | number | RegExp"},{"name":"should","description":["Creates an assertion.","Find more information here [link](https://docs.cypress.io/api/commands/should.html#Syntax)"],"signature":"chainers: string, attribute?: string, content?: string"},{"name":"blur","description":["Lose focus of this element"],"signature":"options?: Partial<Cypress.BlurOptions>"},{"name":"click","description":["Triggers a clicks on the element"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"clickNth","description":["Triggers n times a click on the element"],"signature":"index: number, options?: Partial<Cypress.ClickOptions>"},{"name":"assertExists","description":["Asserts that the element exists in the DOM"],"signature":""},{"name":"assertNotExists","description":["Asserts that the element does not exist in the DOM"],"signature":""},{"name":"assertIsDisabled","description":["Asserts that the element is disabled"],"signature":""},{"name":"assertIsEnabled","description":["Asserts that the element is enabled and can be used"],"signature":""},{"name":"assertVisible","description":["Assert that the component is visible for the user"],"signature":""},{"name":"assertNotVisible","description":["Assert that the component is not visible for the user"],"signature":""},{"name":"selectNth","description":["Selects the option at the given index"],"signature":"index: number"},{"name":"assertAttributeEquals","description":["Asserting that the element has the attribute and the value."],"signature":"attribute: string, value: string"},{"name":"assertAttributeInclude","description":["Asserting that the element has the attribute and include the value."],"signature":"attribute: string, value: string"},{"name":"assertFullUrl","description":["Asserting if given url argument matches the url of the browser."],"signature":"url: string"},{"name":"assertPartUrl","description":["Asserting if the browser url contains the given url argument."],"signature":"url: string"},{"name":"wait","description":["Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command."],"signature":"time: number"}]},{"name":"ToastAccessor","description":["ToastAccessor is a helper object for E-2-E testing.","It maps the toast behaviour to the `bal-toast` ui component.","","```typescript","import { dataTestSelector, ToastAccessor } from '@baloise/ui-library-testing'","","describe('Toast', () => {","it('should ...', () => {","const toast = ToastAccessor(dataTestSelector('toast-id')).get()","toast.click()","})","})","```"],"methods":[{"name":"assertToast","description":["Assert if the toast have content"],"signature":"content: string"},{"name":"contains","description":["Verifies if the content of the element matches"],"signature":"content: string | number | RegExp"},{"name":"click","description":["Triggers a clicks on the element"],"signature":"options?: Partial<Cypress.ClickOptions>"},{"name":"clickNth","description":["Triggers n times a click on the element"],"signature":"index: number, options?: Partial<Cypress.ClickOptions>"},{"name":"assertVisible","description":["Assert that the component is visible for the user"],"signature":""},{"name":"assertNotVisible","description":["Assert that the component is not visible for the user"],"signature":""},{"name":"assertExists","description":["Asserts that the element exists in the DOM"],"signature":""},{"name":"assertNotExists","description":["Asserts that the element does not exist in the DOM"],"signature":""},{"name":"assertIsDisabled","description":["Asserts that the element is disabled"],"signature":""},{"name":"assertIsEnabled","description":["Asserts that the element is enabled and can be used"],"signature":""},{"name":"should","description":["Creates an assertion.","Find more information here [link](https://docs.cypress.io/api/commands/should.html#Syntax)"],"signature":"chainers: string, attribute?: string, content?: string"},{"name":"selectNth","description":["Selects the option at the given index"],"signature":"index: number"},{"name":"assertAttributeEquals","description":["Asserting that the element has the attribute and the value."],"signature":"attribute: string, value: string"},{"name":"assertAttributeInclude","description":["Asserting that the element has the attribute and include the value."],"signature":"attribute: string, value: string"},{"name":"assertFullUrl","description":["Asserting if given url argument matches the url of the browser."],"signature":"url: string"},{"name":"assertPartUrl","description":["Asserting if the browser url contains the given url argument."],"signature":"url: string"},{"name":"wait","description":["Wait for a number of milliseconds or wait for an aliased resource to resolve before moving on to the next command."],"signature":"time: number"}]}]