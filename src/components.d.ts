/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  DropDownOption,
} from './components/bal-dropdown/bal-dropdown';
import {
  TabItemOptions,
} from './components/tab-item/tab-item';
import {
  TabItemOptions as TabItemOptions1,
} from './components/tab-item/tab-item';

export namespace Components {
  interface BalAccordion {
    /**
    * Close the accordion
    */
    'close': () => Promise<void>;
    /**
    * Controls if the accordion is collapsed or not
    */
    'collapsed': boolean;
    /**
    * Open the accordion
    */
    'open': () => Promise<void>;
    /**
    * Triggers the accordion
    */
    'toggle': () => Promise<void>;
    /**
    * Type defines the theme of the accordion toggle
    */
    'type': | "is-primary"
    | "is-info";
  }
  interface BalButton {
    /**
    * If `true` the button is disabled
    */
    'disabled': boolean;
    /**
    * If `true` the button has a full width
    */
    'expanded': boolean;
    /**
    * If `true` the button is inverted
    */
    'inverted': boolean;
    /**
    * If `true` the button has a light color
    */
    'light': boolean;
    /**
    * If `true` the label is hidden and a loading spinner is shown instead.
    */
    'loading': boolean;
    /**
    * If `true` the button is outlined
    */
    'outlined': boolean;
    /**
    * The theme type of the button. Given by bulma our css framework.
    */
    'type': | "is-primary"
    | "is-info"
    | "is-success"
    | "is-warning"
    | "is-danger"
    | "is-link";
  }
  interface BalDatepicker {
    /**
    * Close the datepicker dropdown
    */
    'close': () => Promise<void>;
    /**
    * Disable the input
    */
    'disabled': boolean;
    /**
    * Language of the datepicker. Possible values are `de`, `fr`,`it` or `en`.
    */
    'language': string;
    /**
    * Latest date available for selection
    */
    'maxDate': string;
    /**
    * Latest year available for selection
    */
    'maxYear': string;
    /**
    * Earliest date available for selection
    */
    'minDate': string;
    /**
    * Earliest year available for selection
    */
    'minYear': string;
    /**
    * Open the datepicker dropdown
    */
    'open': () => Promise<void>;
    /**
    * The value of the datepicker with the format `dd.MM.yyyy`.
    */
    'value': string;
  }
  interface BalDropdown {
    /**
    * Closes the dropdown menu
    */
    'close': () => Promise<void>;
    /**
    * If `true` the field expands over the whole width.
    */
    'expanded': boolean;
    /**
    * Returns the value of the dropdown.
    */
    'getSelectedValue': () => Promise<any>;
    /**
    * Open the dropdown menu
    */
    'open': () => Promise<void>;
    /**
    * Selects a dropdown item and changes the value.
    */
    'selectItem': (option: DropDownOption) => Promise<void>;
    /**
    * If `true` the field gets a line below.
    */
    'showBottomLine': boolean;
    /**
    * Open & closes the dropdown
    */
    'toggle': () => Promise<void>;
    /**
    * The value of the selected dropdown item.
    */
    'value': any;
  }
  interface BalDropdownItem {
    /**
    * The value of the dropdown item. This value will be returned by the parent <bal-dropdown> element.
    */
    'value': string | boolean | number | object;
  }
  interface BalField {
    /**
    * Baloise icon for the left side of the input
    */
    'iconLeft': string;
    /**
    * Baloise icon for the right side of the input
    */
    'iconRight': string;
    /**
    * Label text
    */
    'label': string;
    /**
    * If `true` a asterix (*) is added to the label text
    */
    'required': boolean;
    /**
    * Validation message text
    */
    'validationMessage': string;
  }
  interface BalSpinner {}
  interface BalTabItem {
    /**
    * Tell's if the tab is active and the content is visible.
    */
    'active': boolean;
    /**
    * Options of the tab like label, value etc.
    */
    'getOptions': () => Promise<TabItemOptions>;
    /**
    * Label for the tab.
    */
    'label': string;
    /**
    * Sets the tab active.
    */
    'setActive': (active: boolean) => Promise<void>;
    /**
    * This is the key of the tab.
    */
    'value': string;
  }
  interface BalTabs {
    /**
    * Select a tab by the value of the tab item.
    */
    'select': (value: string) => Promise<void>;
  }
  interface BalTag {
    /**
    * The theme type of the tag. Given by bulma our css framework.
    */
    'type': | "is-primary"
    | "is-info"
    | "is-success"
    | "is-warning"
    | "is-danger"
    | "is-light";
  }
  interface BalToast {
    /**
    * Closes this toast
    */
    'close': () => Promise<void>;
    /**
    * Closes the toast after the given duration in ms
    */
    'closeIn': (duration: number) => Promise<void>;
    /**
    * Message text
    */
    'message': string;
    /**
    * The theme type of the toast. Given by bulma our css framework.
    */
    'type': | "is-primary"
    | "is-info"
    | "is-success"
    | "is-warning"
    | "is-danger";
  }
}

declare global {


  interface HTMLBalAccordionElement extends Components.BalAccordion, HTMLStencilElement {}
  var HTMLBalAccordionElement: {
    prototype: HTMLBalAccordionElement;
    new (): HTMLBalAccordionElement;
  };

  interface HTMLBalButtonElement extends Components.BalButton, HTMLStencilElement {}
  var HTMLBalButtonElement: {
    prototype: HTMLBalButtonElement;
    new (): HTMLBalButtonElement;
  };

  interface HTMLBalDatepickerElement extends Components.BalDatepicker, HTMLStencilElement {}
  var HTMLBalDatepickerElement: {
    prototype: HTMLBalDatepickerElement;
    new (): HTMLBalDatepickerElement;
  };

  interface HTMLBalDropdownElement extends Components.BalDropdown, HTMLStencilElement {}
  var HTMLBalDropdownElement: {
    prototype: HTMLBalDropdownElement;
    new (): HTMLBalDropdownElement;
  };

  interface HTMLBalDropdownItemElement extends Components.BalDropdownItem, HTMLStencilElement {}
  var HTMLBalDropdownItemElement: {
    prototype: HTMLBalDropdownItemElement;
    new (): HTMLBalDropdownItemElement;
  };

  interface HTMLBalFieldElement extends Components.BalField, HTMLStencilElement {}
  var HTMLBalFieldElement: {
    prototype: HTMLBalFieldElement;
    new (): HTMLBalFieldElement;
  };

  interface HTMLBalSpinnerElement extends Components.BalSpinner, HTMLStencilElement {}
  var HTMLBalSpinnerElement: {
    prototype: HTMLBalSpinnerElement;
    new (): HTMLBalSpinnerElement;
  };

  interface HTMLBalTabItemElement extends Components.BalTabItem, HTMLStencilElement {}
  var HTMLBalTabItemElement: {
    prototype: HTMLBalTabItemElement;
    new (): HTMLBalTabItemElement;
  };

  interface HTMLBalTabsElement extends Components.BalTabs, HTMLStencilElement {}
  var HTMLBalTabsElement: {
    prototype: HTMLBalTabsElement;
    new (): HTMLBalTabsElement;
  };

  interface HTMLBalTagElement extends Components.BalTag, HTMLStencilElement {}
  var HTMLBalTagElement: {
    prototype: HTMLBalTagElement;
    new (): HTMLBalTagElement;
  };

  interface HTMLBalToastElement extends Components.BalToast, HTMLStencilElement {}
  var HTMLBalToastElement: {
    prototype: HTMLBalToastElement;
    new (): HTMLBalToastElement;
  };
  interface HTMLElementTagNameMap {
    'bal-accordion': HTMLBalAccordionElement;
    'bal-button': HTMLBalButtonElement;
    'bal-datepicker': HTMLBalDatepickerElement;
    'bal-dropdown': HTMLBalDropdownElement;
    'bal-dropdown-item': HTMLBalDropdownItemElement;
    'bal-field': HTMLBalFieldElement;
    'bal-spinner': HTMLBalSpinnerElement;
    'bal-tab-item': HTMLBalTabItemElement;
    'bal-tabs': HTMLBalTabsElement;
    'bal-tag': HTMLBalTagElement;
    'bal-toast': HTMLBalToastElement;
  }
}

declare namespace LocalJSX {
  interface BalAccordion {
    /**
    * Controls if the accordion is collapsed or not
    */
    'collapsed'?: boolean;
    /**
    * Type defines the theme of the accordion toggle
    */
    'type'?: | "is-primary"
    | "is-info";
  }
  interface BalButton {
    /**
    * If `true` the button is disabled
    */
    'disabled'?: boolean;
    /**
    * If `true` the button has a full width
    */
    'expanded'?: boolean;
    /**
    * If `true` the button is inverted
    */
    'inverted'?: boolean;
    /**
    * If `true` the button has a light color
    */
    'light'?: boolean;
    /**
    * If `true` the label is hidden and a loading spinner is shown instead.
    */
    'loading'?: boolean;
    /**
    * If `true` the button is outlined
    */
    'outlined'?: boolean;
    /**
    * The theme type of the button. Given by bulma our css framework.
    */
    'type'?: | "is-primary"
    | "is-info"
    | "is-success"
    | "is-warning"
    | "is-danger"
    | "is-link";
  }
  interface BalDatepicker {
    /**
    * Disable the input
    */
    'disabled'?: boolean;
    /**
    * Language of the datepicker. Possible values are `de`, `fr`,`it` or `en`.
    */
    'language'?: string;
    /**
    * Latest date available for selection
    */
    'maxDate'?: string;
    /**
    * Latest year available for selection
    */
    'maxYear'?: string;
    /**
    * Earliest date available for selection
    */
    'minDate'?: string;
    /**
    * Earliest year available for selection
    */
    'minYear'?: string;
    /**
    * Triggers when the value of the datepicker is changed
    */
    'onInput'?: (event: CustomEvent<string>) => void;
    /**
    * The value of the datepicker with the format `dd.MM.yyyy`.
    */
    'value'?: string;
  }
  interface BalDropdown {
    /**
    * If `true` the field expands over the whole width.
    */
    'expanded'?: boolean;
    'onDropdownSelected'?: (event: CustomEvent<any>) => void;
    'onSelectDropdownItem'?: (event: CustomEvent<any>) => void;
    /**
    * If `true` the field gets a line below.
    */
    'showBottomLine'?: boolean;
    /**
    * The value of the selected dropdown item.
    */
    'value'?: any;
  }
  interface BalDropdownItem {
    /**
    * Click event of the dropdown item.
    */
    'onClickEvent'?: (event: CustomEvent<any>) => void;
    /**
    * The value of the dropdown item. This value will be returned by the parent <bal-dropdown> element.
    */
    'value'?: string | boolean | number | object;
  }
  interface BalField {
    /**
    * Baloise icon for the left side of the input
    */
    'iconLeft'?: string;
    /**
    * Baloise icon for the right side of the input
    */
    'iconRight'?: string;
    /**
    * Label text
    */
    'label'?: string;
    /**
    * If `true` a asterix (*) is added to the label text
    */
    'required'?: boolean;
    /**
    * Validation message text
    */
    'validationMessage'?: string;
  }
  interface BalSpinner {}
  interface BalTabItem {
    /**
    * Tell's if the tab is active and the content is visible.
    */
    'active'?: boolean;
    /**
    * Label for the tab.
    */
    'label'?: string;
    /**
    * This is the key of the tab.
    */
    'value'?: string;
  }
  interface BalTabs {
    /**
    * Emitted when the changes has finished.
    */
    'onBalTabsDidChange'?: (event: CustomEvent<TabItemOptions>) => void;
  }
  interface BalTag {
    /**
    * The theme type of the tag. Given by bulma our css framework.
    */
    'type'?: | "is-primary"
    | "is-info"
    | "is-success"
    | "is-warning"
    | "is-danger"
    | "is-light";
  }
  interface BalToast {
    /**
    * Message text
    */
    'message'?: string;
    /**
    * The theme type of the toast. Given by bulma our css framework.
    */
    'type'?: | "is-primary"
    | "is-info"
    | "is-success"
    | "is-warning"
    | "is-danger";
  }

  interface IntrinsicElements {
    'bal-accordion': BalAccordion;
    'bal-button': BalButton;
    'bal-datepicker': BalDatepicker;
    'bal-dropdown': BalDropdown;
    'bal-dropdown-item': BalDropdownItem;
    'bal-field': BalField;
    'bal-spinner': BalSpinner;
    'bal-tab-item': BalTabItem;
    'bal-tabs': BalTabs;
    'bal-tag': BalTag;
    'bal-toast': BalToast;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements {
      'bal-accordion': LocalJSX.BalAccordion & JSXBase.HTMLAttributes<HTMLBalAccordionElement>;
      'bal-button': LocalJSX.BalButton & JSXBase.HTMLAttributes<HTMLBalButtonElement>;
      'bal-datepicker': LocalJSX.BalDatepicker & JSXBase.HTMLAttributes<HTMLBalDatepickerElement>;
      'bal-dropdown': LocalJSX.BalDropdown & JSXBase.HTMLAttributes<HTMLBalDropdownElement>;
      'bal-dropdown-item': LocalJSX.BalDropdownItem & JSXBase.HTMLAttributes<HTMLBalDropdownItemElement>;
      'bal-field': LocalJSX.BalField & JSXBase.HTMLAttributes<HTMLBalFieldElement>;
      'bal-spinner': LocalJSX.BalSpinner & JSXBase.HTMLAttributes<HTMLBalSpinnerElement>;
      'bal-tab-item': LocalJSX.BalTabItem & JSXBase.HTMLAttributes<HTMLBalTabItemElement>;
      'bal-tabs': LocalJSX.BalTabs & JSXBase.HTMLAttributes<HTMLBalTabsElement>;
      'bal-tag': LocalJSX.BalTag & JSXBase.HTMLAttributes<HTMLBalTagElement>;
      'bal-toast': LocalJSX.BalToast & JSXBase.HTMLAttributes<HTMLBalToastElement>;
    }
  }
}


